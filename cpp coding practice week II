#-----加法method A-----
#include <iostream>  //文件导入 
using namespace std; //使用文件中的流对象cin、cout 
int main(void) //定义主函数，数据类型为int类型，无变量 
{
	int a,b,c; //定义变量a，b，c 
	cin >> a; //输入以赋值给a 
	cin >> b; //输入以赋值给b 
	c = a + b; //将a，b相加并赋值给c 
	cout << c << '\n'; //输出c并换行 
	return 0; //不返回任何值 
}


#-----加法method B-----
#include <iostream> //文件導入 
using namespace std; //使用文件中cin、cout流對象 
int sum(int x, int y) //構造加法函數，int類型，x、y變量 
{
	int z; //定義z 
	z = x + y; //加法表達式 
	return z; //返回z的值 
}
int main(void) //構造主函數，int類型，x、y變量。程序由此處開始 
{
	int a , b; //定義a、b ** int a, int b； ：句法错误，会致使b未被说明 
	cin >> a; //輸入以賦值給a 
	cin >> b; //輸入以賦值給b 
	int c;  //定義c 
	c = sum(a, b); //調用前面定義了的sum函數計算a和b的和并返回給c  
	cout << "c=" << c; //輸出c的值 
	return 0; //不返回任何值 
}  


#-----輸出文字和符號-----
#include <iostream> //导入文件<iostream> 
using namespace std; //使用文件中流对象cout
int main(void) //定义主函数，数据类型为int类型，无参数 
{
	cout << "Hello,GDUFS!" << '\n' <<"(〃'▽'〃)"; //输出文字"Hello,GDUFS!",一个有字母或字符的自定义图案(〃'▽'〃) 
	return 0; //不返回任何值 
}


#-----計算平方method A-----
#include <iostream> //導入文件 
using namespace std; //使用文件中的流對象cin、cout 
int main(void) //定義主函數，程序從此處開始運行 
{
	int a, b; //定義a、b 
	cout << "a= "; //輸出提示信息字符串"a=" 
	cin >> a; //輸入以賦值給a 
	b = a * a; //將a平方并賦值給b 
	cout << b; //輸出b的值 
	return 0; //不返回任何值 
}


#-----計算平方method B-----
#include <iostream> //導入文件 **“<”打了之後自動補充“>”  
using namespace std; //使用文件中的流對象cin、cout 
int square(int a) //定義函數square，int類型，變量（形式參數）a 
{
	int b; //定義b 
	b = a * a; //將a平方并賦值給b 
	return b; //返回b的值 
 } 
 int main(void) //定義主函數，int類型，無變量 
 {
 	int x; //定義x 
 	cout << "please input a number:"; //輸出提示字符串 
 	cin >> x; //輸入數據并賦值給x 
 	square(x); //調用函數square并計算x的平方，square函數運行并將結果返回給主函數的square（x） 
 	cout << square(x); //輸出square（x） 
	/*
	square(x);
 	cout << square(x);   
	可寫成： 
	int y; //定義y **y可以替換成b，此處的b為local。（square函數的b也為local） 
	y = square(x); //調用square函數并計算x的平方，square函數運行并將結果返回給y 
	cout << y; //輸出y的值  
	*/ 
 	return 0;
 }


#-----輸入+輸出+加法+平方-cpp-----
#include"pch.h"
#include <iostream>
using namespace std;
 
/*
構造求和函數
*/
int sum(int x, int y)
{
	int sum;
	sum = x + y;
	return sum;
}

/*
構造求平方函數
*/
int square(int a)
{
	int square;
	square = a * a;
	return square;
}

int main(void)
{
	/*
	輸出文本字符串和符號
	*/
	cout << "Hello,GDUFS!" << '\n' << ">w<" << '\n';
	
	/*
	用運算符求和
	*/
	int a, b, c;
	cout << "input a number:" << '\n';
	cin >> a;
	cout << "input one more number:" << '\n';
	cin >> b;
	c = a + b;
	cout << c << '\n';

	/*
	用求和函數求和
	*/
	int d, e, f;
	cout << "input a number:" << '\n';
	cin >> d;
	cout << "input one more number" << '\n';
	cin >> e;
	f = sum(d, e);
	cout << f << '\n';

	/*
	用運算符求平方
	*/

	int g, h;
	cout << "input a number:" << '\n';
	cin >> g;
	h = g * g;
	cout << h << '\n';
	

	/*
	用求平方函數求平方
	*/
	int i, j;
	cout << "input a number:" << '\n';
	cin >> i;
	j = square(i);
	cout << j;
	return 0;
}

#-----輸入+輸出+加法+平方-py-----
print("Hello GDUFS! \n >w<") #use print function to output something 
"""
* "," is not needed when \n is put between two parts of a string or it will also be output
but it is needed when \n is put after a variable, in which situation a pair of double quotes is also necessary
for example:
print("Hello GDUFS! \n >w<")
but:
print("the result of adding up", a, "and", b, "is",c, "\n")

"""

a = int(input("input a number: \n")) #input something with the input function 
b = int(input("input one more number: \n")) #input something with the input function 
c = a + b #add up a and b with the operator +
print(c) #output the result with the print function

def sum(a, b): #define a function with a name "sum" and parameters a and b
    c = a + b #add up a and b with the operator +
    print(c) #output the result with the print function

sum(a, b) #use sum function defined above to add up numbers

d = int(input("input a number: \n")) #input something with the input function
e = d * d #square d with the operator *
print(e) #output the result with the print function

def square(d): #define a function with a name "square" and a parameter d
    e = d * d #square d with the operator *
    print(e) #output the result with the print function

square(d) #use square function defined above to square numbers

#-----Exercise-1-cpp-----
#include"pch.h" #remember to add that at the beginning of the code when using Microsoft Visual Studio C++!!
#include <iostream>
using namespace std;
int main(void)
{
	int a, b, c, d, e;
	cout << "please input a number: " << '\n';
	cin >> a;
	cout << "please input one more number: " << '\n';
	cin >> b;
	c = a + b;
	d = a * a;
	e = b * b;
	cout << "the result of adding up " << a << " and " << b << " is " << c << '\n';
	/*
	unlike in Python, the cout in cpp doesn't put a space automatically between a string or a parameter
	which means we should remember to put the space by ourselves
	that is
	cout << "the result of adding up" << a << "and" << b << "is" << c << '\n';
	will be printed out like
	the result of adding up6and6is12
	*/
	cout << "the result of squaring " << a << " is " << d << '\n';
	cout << "the result of squaring " << b << " is " << e << '\n';
	return 0;
}

#-----Exercise-1-py-----
a = int(input("please input a number: \n"))
b = int(input("please input one more number: \n"))
c = a + b
d = a * a
e = b * b
print("the result of adding up", a, "and", b, "is",c, "\n") 
"""
*the print function in Python will put a space automatically between a string and a variable
*the line-changing notation \n should be closed in a pair of double quotes "" 
 and in C++ it's closed in a pair of single quotes ''
"""
print("the result of squaring", a, "is", d, "\n")
print("the result of squaring", b, "is", e, "\n")

#-----差分機平方算法-Python-----
#根據差分機原理算輸入的數及其之後99個自然數的平方
b = int(input("input a number: \n"))
a = b + 1
n = 1
print(pow(b, 2)) 
print(pow(a, 2))
while n < 99:
    
    d = a * a
    e = b * b
    f = 2 + 2 * d - e
    n = n + 1
    a = a + 1
    b = b + 1


    print(f)
print(a, b)

#-----由差分機算平方原理推出的pow（num，index）求法-----
"""
It's a program to get the result of pow(num, index).
From the conclusion of the algorithm of the Difference Engine that gets the result of two numbers squared, 
we can derive an expression: num ^ index + ∑(-1) ^ ki * Cnumk(index ， ki) * (num + i) ^ index = num!, ki ∈ (1, num)，ki ∈ Z; i ∈ (-num, -1)(i is iterated over from the right), i ∈ Z
The result of Cnumk can be calculated by making functions
Cnumk = num(num-1)(num-2)…(num-k+1) / num!
Therefore,when a function for calculating num(num-1)(num-2)…(num-k+1) and a function for calculating num! are defined seperately 
then put together to make a function to calculate Cnumk
we can get the result of Cnumk
"""

#求k！
def factorial(k): #define a function called factorial with a parameter k to get k!
    a = 1 #k starts from 1
    for i in range(2, k + 1): #iterate over the range which starts from 2 and ends with k+1. that is, 1*2*3*……*k 
        a = a * i
    return a #RETURN THE RESULT SO THAT WE CAN USE IT IN ANOTHER FUNCTION! *note that return is necessary when we want to print out the result of the function

#求num(num-1)(num-2)…(num-k+1)
def func2(num, k): #define a function called func2 with two parameters num and k to get the result of the expression shown above
    #actually this function can be omitted here as we have one already below
    b = 1 
    for i in range(- (k - 1), 1): #(a smaller number, a greater number) *watch out for the former part -(k-1)!
        b = (num + i) * b
#——————————————————————————————————————————————————————————————————————     
#求Cnk:
def Cnk(num, k):
    if k == num or k == 0: #they are two special situation *note that equal is represented by == in py.
        c = 1
    else: 
        #求k！
        a = 1
        for i in range(2, k + 1):
            a = a * i
 
        #求num(num-1)(num-2)…(num-k+1)
        b = 1
        for i in range(- (k - 1), 1): #(a smaller number, a greater number)
            b = (num + i) * b
        c = b / a
    return c #RETURN THE RESULT SO THAT WE CAN USE IT IN ANOTHER FUNCTION!

num = int(input("input a number: \n")) #output a message and make users input a number
index = int(input("input the index: \n")) #output message and make users input an index

def func(): 
    ki = range(1, num + 1) #f
    i = range(-1, -num - 1, -1) #g
    di = dict(zip(ki, i)) #make two tuples including needed data seperately be in a dictionary with zip()
    h = 0
    for f, g in di.items(): #use the dictionary and items() to access every pair of information AT THE SAME TIME
        h = h + pow(-1, f) * Cnk(index, f) * pow((num + g), index) #it's an expression got from the algorithm of the difference engine
    return h #RETURN THE RESULT SO THAT WE CAN USE IT IN ANOTHER FUNCTION!

C = factorial(index) - func() #watch out for the "-"
print(C)


-----Exercise II-----
#include"pch.h" //remember the # 
#include <iostream> //in cpp, comments behind a statement is represented with // but not #
using namespace std;
int func(int x, int y)
{
	int z;
	z = x + y; 
	return z; //note that if a value returned from the function is needed, the statement should be written like return a, a is the value needed
}
int main(void)
{
	int a, b; //remember to define letters if they are to be used below
	cout << "Hello World! \n " << '\n' << "(〃'▽'〃) \n" << '\n'; // \n can be put in a pair of double quotes as a part of the string just like that in python
	cout << "input a number:" << '\n';
	cin >> a;
	cout << "input one more number:" << '\n';
	cin >> b;
	func(a, b);
	cout << a << " plus " << b << " is " << func(a, b) << '\n'; //like in py, a function with expected variables can be directly put in a cout statement
	return 0;
}
